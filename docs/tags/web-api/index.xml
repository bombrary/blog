<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web API on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/web-api/</link>
    <description>Recent content in Web API on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 29 May 2021 13:00:00 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/tags/web-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PythonとWSGIで作るTodoリストAPI</title>
      <link>https://bombrary.github.io/blog/posts/todo-list-wsgi/</link>
      <pubDate>Sat, 29 May 2021 13:00:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/todo-list-wsgi/</guid>
      <description>シンプルなTodoリストを作る。 今回は勉強のため、Webアプリケーションフレームワークは使わずに、 敢えてWSGIの仕様のみ参考にして書く．
WSGIとは WSGIとは、WebサーバーとWebアプリとの間の標準的なインターフェース。 WSGIの仕様に沿ってWebアプリを作れば、 WSGI対応のどんなWebサーバーとも連携することができる。
WSGIの仕様はPEP3333に書かれている．
TodoリストAPIの仕様 簡単のため、今回Todoのデータはidと内容のみ持つデータとし、{ id: 0, &amp;quot;content&amp;quot;: &amp;quot;やること&amp;quot; }というJSON形式とする。
APIの仕様は以下の通り。
   URI Method 説明 返却値     /todo/ GET 全てのTodoを取得。 ToDoのデータのリスト   /todo/ POST Todoを作成。 作成したToDoのid   /todo/&amp;lt;todo_id&amp;gt; GET todo_idのidを持つTodoを取得。 ToDoのデータ   /todo/&amp;lt;todo_id&amp;gt; PUT todo_idのidを持つTodoを変更。 空のオブジェクト   /todo/&amp;lt;todo_id&amp;gt; DELETE todo_idのidを持つTodoを削除 空のオブジェクト    データは最終的にはSQLiteで保存するが、最初は単純にlistで扱う。
雛形 まずはサーバーを作る。この時点ではルーティング処理を書いていない。 どのようなリクエストをしてもHello, Worldをレスポンスとして返す。
from wsgiref.simple_server import make_server def app(env, start_response): start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain; charset=utf-8&amp;#39;)]) return [b&amp;#39;Hello, World.</description>
    </item>
    
  </channel>
</rss>
