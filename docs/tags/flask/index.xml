<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/flask/</link>
    <description>Recent content in Flask on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 03 Jun 2021 23:29:00 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PythonとFlask(&#43;α)で作るToDoリストAPI</title>
      <link>https://bombrary.github.io/blog/posts/todo-api-flask/</link>
      <pubDate>Thu, 03 Jun 2021 23:29:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/todo-api-flask/</guid>
      <description>シンプルなToDoリストのWeb APIを作る。 今までWSGIの仕様のみ、Werkzeug の2通りで実装したが、今回はFlaskといくつかのライブラリを使う。使うのは以下の通り。
 Flask: WSGIアプリフレームワーク。 peewee: ORMライブラリ。 marshmallow: データの変換やvalidationをするためのライブラリ。  Flaskとは WSGIのWebアプリを作るためのフレームワーク。 フレームワークであるため、Flaskが用意した作法に従ってコードを書くことで比較的手軽にWebアプリが作成できる。 前回との比較でいうならば、例えばルーティングの仕組みをプログラマが書く必要はない。これはFlaskに備わっている。
Djangoのようなフレームワークとは違って、持っている機能は少ない。必要に応じて外部ライブラリを組み合わせる。 例えば、Djangoではデフォルトでデータベースの仕組みが内蔵されているが、Flaskにはない。その代わりに、 データベースのライブラリとしてsqlite3やSQLAlchemy、peeweeなど、好きなものを用いれば良い。
ToDoリストAPIの仕様 今回ToDoのデータは以下キーと値を持つJSONデータとする。
   key value     id ID   content ToDoの内容   created_at 作成日時 (ISO8601)   updated_at 更新日時 (ISO8601)    APIの仕様は以下の通り。
   URL Method 説明 返却値     /todo/ GET 全てのToDoを取得。 ToDoのデータのリスト   /todo/ POST ToDoを作成。 なし (LocationヘッダにそのToDoへのURLを乗せる)   /todo/&amp;lt;todo_id&amp;gt; GET todo_idのidを持つToDoを取得。 ToDoのデータ   /todo/&amp;lt;todo_id&amp;gt; PUT todo_idのidを持つToDoを変更。 なし   /todo/&amp;lt;todo_id&amp;gt; DELETE todo_idのidを持つToDoを削除 なし    データはSQLiteで管理する。</description>
    </item>
    
  </channel>
</rss>
