<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Werkzeug on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/werkzeug/</link>
    <description>Recent content in Werkzeug on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 30 May 2021 11:49:40 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/tags/werkzeug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PythonとWerkzeugで作るToDoリストAPI</title>
      <link>https://bombrary.github.io/blog/posts/todo-api-werkzeug/</link>
      <pubDate>Sun, 30 May 2021 11:49:40 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/todo-api-werkzeug/</guid>
      <description>シンプルなToDoリストのWeb APIを作る。 前回はWSGIの仕様のみを参考にして作ったが、 今回はWerkzeugというライブラリを利用する。
Werkzeugとは Werkzeugのドキュメントの &amp;ldquo;Werkzeug is a comprehensive WSGI web application library.&amp;ldquo;という文面にもある通り、 これはWSGIのWebアプリを作るためのライブラリである。 あくまでフレームワークではなく、ライブラリであることに注意する。 Webアプリを作るうえで、便利なクラスや関数が用意された「道具箱」のようなイメージを持つとよいかもしれない (そもそも&amp;quot;werkzeug&amp;quot;という単語はドイツ語で「道具」という意味)。 あくまで道具があるだけなので、どういう設計を行うかなどを考える余地がある。
ToDoリストAPIの仕様 前回と同じだが、再掲する。
簡単のため、今回ToDoのデータはidと内容のみ持つデータとし、{ id: 0, &amp;quot;content&amp;quot;: &amp;quot;やること&amp;quot; }というJSON形式とする。
APIの仕様は以下の通り。
   URI Method 説明 返却値     /todo/ GET 全てのToDoを取得。 ToDoのデータのリスト   /todo/ POST ToDoを作成。 作成したToDoのid   /todo/&amp;lt;todo_id&amp;gt; GET todo_idのidを持つToDoを取得。 ToDoのデータ   /todo/&amp;lt;todo_id&amp;gt; PUT todo_idのidを持つToDoを変更。 空のオブジェクト   /todo/&amp;lt;todo_id&amp;gt; DELETE todo_idのidを持つToDoを削除 空のオブジェクト    データは最終的にはSQLiteで管理する。</description>
    </item>
    
  </channel>
</rss>
