<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CLI on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/cli/</link>
    <description>Recent content in CLI on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 09 Dec 2021 11:08:15 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/tags/cli/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pythonを使った(静的)ページの画像のURL取得</title>
      <link>https://bombrary.github.io/blog/posts/python-get-img-url-static/</link>
      <pubDate>Thu, 09 Dec 2021 11:08:15 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/python-get-img-url-static/</guid>
      <description>Webページの画像だけを手っ取り早く取得したい場合にどうすれば良いのかを考えた。 これを行うプログラムをPythonで取得する。
この記事で作成したプログラムはGitHubのRepositoryに公開した。
前提   Pythonのバージョンは3.10を想定。
  この記事では外部ライブラリとして
 Requests 2.26.0 Beautiful Soup 4.10.0 tqdm 4.62.3 w3lib 1.22.0  を使う。この記事のコードを動かす場合はpipコマンドなどでインストールしておく。
  方針 やることは案外単純である。
 WebページのHTMLデータを取ってくる。 img要素を探して、そのsrc属性を取ってくる。 scheme、netlocが無かったらそれを付加して、完全なURLにする。  1はRequests、2はBeautiful Soupを使えば良いだろう。 3は思ったより複雑である。src属性に入っているパスには、
 URL: http://foo.org/bar/hoge.png スキームが省略されている: //foo.org/bar/hoge.png 絶対パス: /bar/hoge.png 相対パス: ../bar/hoge.png データURL: data:image/png;base64,...  など色々ある。 これらのフォーマットを統一して完全なURLにするのは面倒であるが、幸運にもurllib.parse.urljoinという関数があったのでこれを使う (余談: 初め、urljoinの存在を知らずに自前でURLの変換機能を実装してしまった。学びにはなったが時間を費やした…)。
ついでの機能として、「特定の要素の中に含まれているimg要素のURLを取得する」ことも考える。 これはCSSセレクタとして指定できるようにする。
まとめると、画像のURLを取得する関数は以下のようなインターフェースとなる。
def get_img_urls(url: str, selector: Optional[str]=None) -&amp;gt; list[str]: pass # これから実装する URLとセレクタを引数にとり、img要素のURLのリストを返す関数である。
ついでに画像ダウンロードのためのCLIや、画像を閲覧するWebアプリなどが作れたら良い。
プロジェクトの構造 Pythonでモジュールを作ったことがないため、正しい作り方が分からないが、とりあえず以下のような構成にしてみる。 細かいディレクトリの構成は各節で述べる。
/project | +--+ getimg/ | +--+ commandline/ | +--+ viewer/ | +--+ tests/ +-- __init__.</description>
    </item>
    
  </channel>
</rss>
