<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elm-svg on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/elm-svg/</link>
    <description>Recent content in elm-svg on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 27 Feb 2020 12:39:44 +0900</lastBuildDate>
    <atom:link href="https://bombrary.github.io/blog/tags/elm-svg/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elmメモ ドラッグ移動の実現(2) - elm-draggableの利用</title>
      <link>https://bombrary.github.io/blog/posts/elm-drag02/</link>
      <pubDate>Thu, 27 Feb 2020 12:39:44 +0900</pubDate>
      <guid>https://bombrary.github.io/blog/posts/elm-drag02/</guid>
      <description>前回はBrowsertやSvgなどの標準的なパッケージを利用してドラッグ機能を実現した。今回はelm-draggableというパッケージを使ってドラッグ機能を実現してみる。&#xA;準備 Elmのプロジェクトを作成して、src/Main.elmとsrc/Circle.elmを作成。&#xA;Circle.elm 前回と同じなのでコードだけ載せる。&#xA;module Circle exposing (..) type alias Id = Int type alias Circle = { id : Id , x : Float , y : Float , r : Float } type alias Circles = { all : List Circle , nextId : Id } empty : Circles empty = { all = [] , nextId = 0 } type alias CircleNoId = { x : Float , y : Float , r : Float } add : CircleNoId -&amp;gt; Circles -&amp;gt; Circles add c circles = let circle = { id = circles.</description>
    </item>
    <item>
      <title>Elmメモ ドラッグ移動の実現(1)</title>
      <link>https://bombrary.github.io/blog/posts/elm-drag01/</link>
      <pubDate>Tue, 25 Feb 2020 19:15:00 +0900</pubDate>
      <guid>https://bombrary.github.io/blog/posts/elm-drag01/</guid>
      <description>ElmでSVGの要素をドラッグ移動したいと思った。ドラッグ操作を実現するパッケージにelm-draggableがある。今回は勉強として、それに頼らず実装することを試みる。elm-draggableを用いた方法については次回やる。&#xA;初期状態 詳細は省略するが、Elmプロジェクトを作成してelm/svgとelm/jsonをインストールしておく。&#xA;src/Main.elmは以下のようにしておく。elm reactorで動くことを確認する。&#xA;module Main exposing (..) import Browser import Browser.Events as BE import Html exposing (..) import Html.Attributes exposing (..) import Json.Decode as JD import Svg as S exposing (Svg) import Svg.Attributes as SA import Svg.Events as SE main = Browser.element { init = init , update = update , view = view , subscriptions = subscriptions } type alias Model = {} type Msg = Dummy init : () -&amp;gt; ( Model, Cmd Msg ) init _ = ( {}, Cmd.</description>
    </item>
  </channel>
</rss>
