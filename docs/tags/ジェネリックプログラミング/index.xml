<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ジェネリックプログラミング on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in ジェネリックプログラミング on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 03 Nov 2020 13:17:39 +0900</lastBuildDate>
    <atom:link href="https://bombrary.github.io/blog/tags/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PureScriptメモ - Generics</title>
      <link>https://bombrary.github.io/blog/posts/purescript-note-generics/</link>
      <pubDate>Tue, 03 Nov 2020 13:17:39 +0900</pubDate>
      <guid>https://bombrary.github.io/blog/posts/purescript-note-generics/</guid>
      <description>purescript-generics-repパッケージを使ってGenericなSerializer型クラスを作った。以下はそのメモ。&#xA;準備 プロジェクトを作成。&#xA;$ spago init Arrayを使うので、パッケージをインストールしてsrc/Main.pursにimport文を書き込んでいく。 本記事の本命であるgenerics-rep入れる。 $ spago install arrays $ spago install generics-rep import Data.Array ((:)) REPLで色々実験するので、あらかじめ起動しておく。 $ spago repl &gt; import Main 以降はsrc/Main.pursに色々書き足していく。REPLで:r(もしくは:reload)とコマンドを打てばモジュールが再読み込みされるので、src/Main.pursを書き換える度にこのコマンドを打つと良い。&#xA;Serializer そもそもSerializerとは何か。ここでは単に「データをビット列に変換するもの」程度の意味で捉えれば良い。 厳密にはJSONなどの階層を持つデータを，文字列などの平坦なデータに変換するという意味合いとしてシリアライズ(直列化)という言葉を使う。実際、本記事では最終的に木構造をシリアライズする。&#xA;まずビットは次のように定義する。&#xA;data Bit = O | I instance showBit :: Show Bit where show O = &amp;#34;O&amp;#34; show I = &amp;#34;I&amp;#34; Serializer型クラスを以下のように定義する。&#xA;class Serializer a where serialize :: a -&amp;gt; Array Bit 試しに適当な型をつくり、それをSerializer型クラスのインスタンスにしてみる。&#xA;data Person = Alice | Bob | Carol instance serializerUser :: Serializer Person where serialize Alice = [ I ] serialize Bob = [ O, I ] serialize Carol = [ O, O, I ] 余談。今回はデシリアライザは実装しないので、シリアライズしたデータを同じ形に戻せるかは考えない。このあたりは情報理論の授業で「一意復号化可能性」などをやった気がするけど、忘れてしまった。</description>
    </item>
  </channel>
</rss>
