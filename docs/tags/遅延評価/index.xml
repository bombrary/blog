<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遅延評価 on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/%E9%81%85%E5%BB%B6%E8%A9%95%E4%BE%A1/</link>
    <description>Recent content in 遅延評価 on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 30 Dec 2021 09:40:00 +0900</lastBuildDate>
    <atom:link href="https://bombrary.github.io/blog/tags/%E9%81%85%E5%BB%B6%E8%A9%95%E4%BE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PureScriptでパーサーコンビネータを触る (1) 四則演算のパース</title>
      <link>https://bombrary.github.io/blog/posts/purescript-parser-combinator01/</link>
      <pubDate>Thu, 30 Dec 2021 09:40:00 +0900</pubDate>
      <guid>https://bombrary.github.io/blog/posts/purescript-parser-combinator01/</guid>
      <description>PureScriptのパーサーコンビネータにpurescript-parsingがある。これはHaskellのParsecが基になっているので、使い方はParsecとほとんど同じだと思われる(とはいえ、Parsecを使ったことはあまりない)。これを用いて四則演算のパーサーを実装してみたが、うまく動かず詰まる点がいくつかあった。その備忘録。&#xA;パーサーコンビネータの準備 % spago install parsing 後々使うので以下のパッケージもインストール。&#xA;% spago install either integers maybe strings arrays lists src/Main.pursに以下の記述を追加。&#xA;import Text.Parsing.Parser (Parser) parser :: Parser String String parser = pure &amp;#34;Hello&amp;#34; REPLを起動して、動くか確認する。どんな文字列を食わせても&amp;quot;Hello&amp;quot;としか結果を返さないパーサーの完成。&#xA;&gt; import Main &gt; import Text.Parsing.Parser (runParser) &gt; runParser &#34;hoge&#34; parser (Right &#34;Hello&#34;) REPLでMain.pursをリロードする場合は:rをREPLで実行する。&#xA;数字のパース 1文字取得 1文字の数字を読み取りたいなら、Text.Parsing.Parser.Tokenにdigitがあるのでそれを使う。&#xA;import Text.Parsing.Parser.Token (digit) parser :: Parser String Char parser = digit &gt; runParser &#34;12345&#34; parser (Right &#39;1&#39;) 1文字以上取得 1文字以上を取得したいなら、Data.Array.Someを使う。&#xA;import Data.Array as Array parser :: Parser String (Array Char) parser = Array.</description>
    </item>
  </channel>
</rss>
