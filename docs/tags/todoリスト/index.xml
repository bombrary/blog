<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Todoリスト on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/tags/todo%E3%83%AA%E3%82%B9%E3%83%88/</link>
    <description>Recent content in Todoリスト on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 29 May 2021 13:00:00 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/tags/todo%E3%83%AA%E3%82%B9%E3%83%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PythonとWSGIで作るTodoリストAPI</title>
      <link>https://bombrary.github.io/blog/posts/todo-list-wsgi/</link>
      <pubDate>Sat, 29 May 2021 13:00:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/todo-list-wsgi/</guid>
      <description>シンプルなTodoリストを作る。 今回は勉強のため、Webアプリケーションフレームワークは使わずに、 敢えてWSGIの仕様のみ参考にして書く．
WSGIとは WSGIとは、WebサーバーとWebアプリとの間の標準的なインターフェース。 WSGIの仕様に沿ってWebアプリを作れば、 WSGI対応のどんなWebサーバーとも連携することができる。
WSGIの仕様はPEP3333に書かれている．
TodoリストAPIの仕様 簡単のため、今回Todoのデータはidと内容のみ持つデータとし、{ id: 0, &amp;quot;content&amp;quot;: &amp;quot;やること&amp;quot; }というJSON形式とする。
APIの仕様は以下の通り。
   URI Method 説明     /todo/ GET 全てのTodoを取得。   /todo/ POST Todoを作成。   /todo/&amp;lt;todo_id&amp;gt; GET todo_idのidを持つTodoを取得。   /todo/&amp;lt;todo_id&amp;gt; PUT todo_idのidを持つTodoを変更。   /todo/&amp;lt;todo_id&amp;gt; DELETE todo_idのidを持つTodoを削除    データは最終的にはSQLiteで保存するが、最初は単純にlistで扱う。
雛形 まずはサーバーを作る。この時点ではルーティング処理を書いていない。 どのようなリクエストをしてもHello, Worldをレスポンスとして返す。
from wsgiref.simple_server import make_server def app(env, start_response): start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-type&amp;#39;, &amp;#39;text/plain; charset=utf-8&amp;#39;)]) return [b&amp;#39;Hello, World.</description>
    </item>
    
    <item>
      <title>Djangoの勉強でTodoリストを作る</title>
      <link>https://bombrary.github.io/blog/posts/django-todo-list/</link>
      <pubDate>Fri, 15 Nov 2019 08:26:41 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/django-todo-list/</guid>
      <description>どんなTodoリストを作るか  Todoの登録  情報は短いテキストだけ   Todoをリスト表示 Todoをクリックすると削除  サイトの作成 適当なディレクトリで次のコマンドを実行すると、mysiteというディレクトリが作られる。以降はmysiteディレクトリで作業する。
$ django-admin startproject mysite アプリの作成 mysiteディレクトリにて以下のコマンドを実行すると、todo_listというディレクトリが作られる。ここに実際のアプリの処理を記述していく。:w
$ python3 manage.py startapp todo_list 続いてmysite/settings.pyを開いて、INSTALL_APPSを以下の記述にする。&#39;todo_list.apps.TodoListConfig&#39;を追加しただけ。これはデータベース作成やテンプレート作成のために、djangoがtodo_listのディレクトリを教えているっぽい。Todo_listConfigかと思ったが違うらしい(エラーで「TodoListConfigだよ」と教えてくれた。優しい)。
INSTALLED_APPS = [ &amp;#39;todo_list.apps.TodoListConfig&amp;#39;, &amp;#39;django.contrib.admin&amp;#39;, &amp;#39;django.contrib.auth&amp;#39;, &amp;#39;django.contrib.contenttypes&amp;#39;, &amp;#39;django.contrib.sessions&amp;#39;, &amp;#39;django.contrib.messages&amp;#39;, &amp;#39;django.contrib.staticfiles&amp;#39;, ] viewの作成 mysite/todo_list/views.pyを編集する。とりあえずviewが動くかどうかだけ確認したいので、レスポンスは適当な文字列にする。
from django.shortcuts import render # Create your views here. def index(request): return HttpResponse(&amp;#39;Hello&amp;#39;) urlの設定 まずmysite/mysite/urls.pyの設定をする。urls.pyとは「どんなurlにアクセスされたらどんなviewに処理を任せるか」を記述したものっぽい。ここでは、todo_list/で始まるurlだったらtodo_list/urls.pyに処理を任せるように書いている。
from django.contrib import admin from django.urls import include, path urlpatterns = [ path(&amp;#39;todo_list/&amp;#39;, include(&amp;#39;todo_list.urls&amp;#39;)), path(&amp;#39;admin/&amp;#39;, admin.site.urls), ] ということでmysite/todo_list/urls.pyの設定をする。恐らく存在しないので新しく作成する。todo_list/以降に何も指定されなかったら表示をviews.pyのindex関数に任せるように書いている。</description>
    </item>
    
  </channel>
</rss>
