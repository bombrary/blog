<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PureScript on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/categories/purescript/</link>
    <description>Recent content in PureScript on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 03 Nov 2020 13:17:39 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/categories/purescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PureScriptメモ - Generics</title>
      <link>https://bombrary.github.io/blog/posts/purescript-note-generics/</link>
      <pubDate>Tue, 03 Nov 2020 13:17:39 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-note-generics/</guid>
      <description>purescript-generics-repパッケージを使ってGenericなSerializer型クラスを作った。以下はそのメモ。
準備 プロジェクトを作成。
$ spago init  Arrayを使うので、パッケージをインストールしてsrc/Main.pursにimport文を書き込んでいく。 本記事の本命であるgenerics-rep入れる。 $ spago install arrays $ spago install generics-rep  import Data.Array ((:)) REPLで色々実験するので、あらかじめ起動しておく。 $ spago repl  import Main  以降はsrc/Main.pursに色々書き足していく。REPLで:r(もしくは:reload)とコマンドを打てばモジュールが再読み込みされるので、src/Main.pursを書き換える度にこのコマンドを打つと良い。
Serializer そもそもSerializerとは何か。ここでは単に「データをビット列に変換するもの」程度の意味で捉えれば良い。 厳密にはJSONなどの階層を持つデータを，文字列などの平坦なデータに変換するという意味合いとしてシリアライズ(直列化)という言葉を使う。実際、本記事では最終的に木構造をシリアライズする。
まずビットは次のように定義する。
data Bit = O | I instance showBit :: Show Bit where show O = &amp;#34;O&amp;#34; show I = &amp;#34;I&amp;#34; Serializer型クラスを以下のように定義する。
class Serializer a where serialize :: a -&amp;gt; Array Bit 試しに適当な型をつくり、それをSerializer型クラスのインスタンスにしてみる。
data Person = Alice | Bob | Carol instance serializerUser :: Serializer Person where serialize Alice = [ I ] serialize Bob = [ O, I ] serialize Carol = [ O, O, I ] 余談。今回はデシリアライザは実装しないので、シリアライズしたデータを同じ形に戻せるかは考えない。このあたりは情報理論の授業で「一意復号化可能性」などをやった気がするけど、忘れてしまった。</description>
    </item>
    
    <item>
      <title>PureScriptでじゃんけんゲーム(CUI)を作る</title>
      <link>https://bombrary.github.io/blog/posts/purescript-janken/</link>
      <pubDate>Thu, 25 Jun 2020 09:05:09 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-janken/</guid>
      <description>プログラミングの初歩で作りそうなじゃんけんゲームを作る。ただし、PureScriptで作る。
方針  Jankenというモジュールを作る  グー・チョキ・パーをHandとして定義する じゃんけんの勝負の結果をJudgementとして定義する コンピュータが出す手はランダムに出したいので、ランダムな手を出す関数randomを作っておく 入力は文字列にしたいので、文字列から手に変換する関数fromStringを作っておく   入出力はMainに書く。Node.ReadLineモジュールの力で入力を受け付ける。  準備 適当なプロジェクトディレクトリを作っておいて、
$ spago init  /src/Main.pursと/src/Janken.pursを作っておく。
/src/Main.pursはとりあえず以下のようにしておく。
module Main where import Prelude import Effect (Effect) import Effect.Console (log) main :: Effect Unit main = do log &amp;#34;Hello&amp;#34; 次のコマンドでHelloが出力されることを確認する。
$ spago run  Jankenモジュールの定義 この節では/src/Janken.pursを編集していく。
module Janken where import Prelude Handの定義 じゃんけんの手を表す型Handを定義する。
data Hand = Rock | Scissors | Paper 余談。これは公式ではタグ付き共用体と呼ばれているもの。Haskellでは代数的データ型と呼ばれているが、正直名前はどうでもいい。データをこのように表現すれば、「データはこの値しかとりえない」という制限が得られる。制限があれば、プログラムのバグも減らせる。たとえば、「グーを0、チョキを1、パーを2」として表現すると、万が一それ以外の値が来た場合に困る。上のようなHandの定義では、「それ以外の値」が入る余地すら与えない。…この話は、Elm Guideの受け売り。
Judgementの定義 同じようにして、じゃんけんの勝敗を表す型Judgementを定義する。
Judgement = WinLeft | WinRight | Draw なぜWinとかLoseではないのかというと、これはjudge関数の都合である。Judgeは、2つの手を引数にとり、その勝負結果を返す。WinやLoseだと、どっちが勝ちでどっちが負けか分からない。なので、「judgeの左側の引数が勝ったらWinLeft、右側が勝ったらWinRight、引き分けならDraw」と定義している。</description>
    </item>
    
  </channel>
</rss>
