<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PureScript on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/categories/purescript/</link>
    <description>Recent content in PureScript on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 04 Jul 2021 11:40:00 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/categories/purescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PureScriptで作るBrainfuckインタプリタ 1/3 基礎部分の作成</title>
      <link>https://bombrary.github.io/blog/posts/purescript-brainfuck01/</link>
      <pubDate>Sun, 04 Jul 2021 11:40:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-brainfuck01/</guid>
      <description>Brainfuckの記事ではあるが、実はモナド変換子を使ってみたかっただけだったりする。
以下の3部の記事で構成されている。
 インタプリタと基本的な命令の実装 (この記事) CUIでの入出力処理の実装 Halogenを用いた入出力処理の実装  この記事でインタプリタの基本的な部分を実装し、 残りの2記事はインタプリタとはあまり関係ない話となる (とはいえ出力ができないと Hello, World すら書けないので、必要な記事ではある)。
Brainfuckインタプリタの構造 Brainfuckインタプリタは以下の情報を内部に持っているものとする。
 program: 命令の列。 iptr: インストラクションポインタ。実行する命令の位置を示す。プログラムカウンタみたいなもの。 dptr: データポインタ。メモリ上のある位置を示す。 memory: メモリ。  インタプリタは以下の手順を踏む。
 iptr番目の命令をprogramから読み取る。 読み取れなかったらプログラムを終了する。 命令に応じてmemory、dptrの書き換えだったり、入出力を行う。 iptrを1進め、手順1に戻る。  どんな命令があるのかについてはWikipedia参照。
準備 適当なディレクトリを作って、プロジェクトの初期化を行う。
% spago init  命令列の作成 src/Brainfuck/Command.pursを作成する。
Commandを定義。Showクラスのインスタンスにして、Charからの変換をする関数を作る。
module Brainfuck.Command where import Prelude data Command = IncPtr -- &amp;#34;+&amp;#34; | DecPtr -- &amp;#34;-&amp;#34; | IncDat -- &amp;#34;&amp;gt;&amp;#34; | DecDat -- &amp;#34;&amp;lt;&amp;#34; | LBrace -- &amp;#34;[&amp;#34; | RBrace -- &amp;#34;]&amp;#34; | Output -- &amp;#34;.</description>
    </item>
    
    <item>
      <title>PureScriptとCanvasで作る『弾むボール』</title>
      <link>https://bombrary.github.io/blog/posts/purescript-bouncing-ball/</link>
      <pubDate>Thu, 17 Jun 2021 16:50:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-bouncing-ball/</guid>
      <description>英語だと &amp;ldquo;bouncing ball programming&amp;rdquo; とか検索すると出てくるやつ。 単にボールが弾むだけなのだが、思ったより勉強になったので書き残す。
実際のプログラムの動作はGitHub Pagesを参照。
プロジェクトの初期化 適当なディレクトリを作って、その中でプロジェクトを作成。
% spago init % spago build  今回は、追加のパッケージは必要なときにspago installコマンドで入れることにする。
Canvas入門 src/Main.pursを以下のようにする。
module Main where import Prelude import Data.Maybe (Maybe(..)) import Effect (Effect) import Effect.Console (log) import Graphics.Canvas (CanvasElement, Dimensions) import Graphics.Canvas as Canvas import Math as Math canvasDimen :: Dimensions canvasDimen = { width: 600.0 , height: 600.0 } initCanvas :: CanvasElement -&amp;gt; Effect Unit initCanvas canvas = Canvas.setCanvasDimensions canvas canvasDimen main :: Effect Unit main = Canvas.</description>
    </item>
    
    <item>
      <title>Purescriptメモ - 配列のシャッフルを様々な方法で実装する</title>
      <link>https://bombrary.github.io/blog/posts/purescript-shuffle/</link>
      <pubDate>Mon, 04 Jan 2021 13:29:19 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-shuffle/</guid>
      <description>PureScriptで配列のシャッフルをしたい。型はこんな感じ。乱数は副作用を伴うため、返り値の型はEffectで包まれる。
shuffle :: forall a. Array a -&amp;gt; Effect (Array a) アルゴリズムはFisher-Yates ShuffleのModern Algorithmの項の2つ目を利用する。これをさまざまな方法で作成したところ、Functor, Applicative, Monadなどに関連する事項だったり、STモナドの使い方、FFIの使い方だったりが学べたので、備忘のために書く。
準備 適当なディレクトリでプロジェクトを作成する。今回使うパッケージをインストールする。
$ spago init $ spago install arrays $ spago install random $ spago install foldable-traversable  方法1: 素直(?)な書き方 ここでは、src/Shuffle.pursに記述する。
天下り的ではあるが、これから使う関数、型をimportしておく。
module Shuffle where import Prelude import Effect (Effect) import Data.Array (range, (!!), updateAt, length) import Data.Traversable (for) import Effect.Random (randomInt) import Data.Maybe (maybe) import Data.Foldable (foldr) まずは、「どの添字ととの添字の値を交換するか」という情報をもったデータExchangeIndexと、それを作成する関数exchangeIndiciesを作成する。
type ExchangeIndex = { i :: Int , j :: Int } exchangeIndicies :: Int -&amp;gt; Effect (Array ExchangeIndex) exchangeIndicies n = for (range 0 (n - 2)) \i -&amp;gt; do j &amp;lt;- randomInt i (n - 1) pure { i, j } 次に、ExchangeIndexの情報を元に配列を交換する関数exchangeを作成。配列の添字が不正だった場合(配列外参照を起こしそうなとき)は!</description>
    </item>
    
    <item>
      <title>PureScriptメモ - Generics</title>
      <link>https://bombrary.github.io/blog/posts/purescript-note-generics/</link>
      <pubDate>Tue, 03 Nov 2020 13:17:39 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-note-generics/</guid>
      <description>purescript-generics-repパッケージを使ってGenericなSerializer型クラスを作った。以下はそのメモ。
準備 プロジェクトを作成。
$ spago init  Arrayを使うので、パッケージをインストールしてsrc/Main.pursにimport文を書き込んでいく。 本記事の本命であるgenerics-rep入れる。 $ spago install arrays $ spago install generics-rep  import Data.Array ((:)) REPLで色々実験するので、あらかじめ起動しておく。 $ spago repl  import Main  以降はsrc/Main.pursに色々書き足していく。REPLで:r(もしくは:reload)とコマンドを打てばモジュールが再読み込みされるので、src/Main.pursを書き換える度にこのコマンドを打つと良い。
Serializer そもそもSerializerとは何か。ここでは単に「データをビット列に変換するもの」程度の意味で捉えれば良い。 厳密にはJSONなどの階層を持つデータを，文字列などの平坦なデータに変換するという意味合いとしてシリアライズ(直列化)という言葉を使う。実際、本記事では最終的に木構造をシリアライズする。
まずビットは次のように定義する。
data Bit = O | I instance showBit :: Show Bit where show O = &amp;#34;O&amp;#34; show I = &amp;#34;I&amp;#34; Serializer型クラスを以下のように定義する。
class Serializer a where serialize :: a -&amp;gt; Array Bit 試しに適当な型をつくり、それをSerializer型クラスのインスタンスにしてみる。
data Person = Alice | Bob | Carol instance serializerUser :: Serializer Person where serialize Alice = [ I ] serialize Bob = [ O, I ] serialize Carol = [ O, O, I ] 余談。今回はデシリアライザは実装しないので、シリアライズしたデータを同じ形に戻せるかは考えない。このあたりは情報理論の授業で「一意復号化可能性」などをやった気がするけど、忘れてしまった。</description>
    </item>
    
    <item>
      <title>PureScriptでじゃんけんゲーム(CUI)を作る</title>
      <link>https://bombrary.github.io/blog/posts/purescript-janken/</link>
      <pubDate>Thu, 25 Jun 2020 09:05:09 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-janken/</guid>
      <description>プログラミングの初歩で作りそうなじゃんけんゲームを作る。ただし、PureScriptで作る。
方針  Jankenというモジュールを作る  グー・チョキ・パーをHandとして定義する じゃんけんの勝負の結果をJudgementとして定義する コンピュータが出す手はランダムに出したいので、ランダムな手を出す関数randomを作っておく 入力は文字列にしたいので、文字列から手に変換する関数fromStringを作っておく   入出力はMainに書く。Node.ReadLineモジュールの力で入力を受け付ける。  準備 適当なプロジェクトディレクトリを作っておいて、
$ spago init  /src/Main.pursと/src/Janken.pursを作っておく。
/src/Main.pursはとりあえず以下のようにしておく。
module Main where import Prelude import Effect (Effect) import Effect.Console (log) main :: Effect Unit main = do log &amp;#34;Hello&amp;#34; 次のコマンドでHelloが出力されることを確認する。
$ spago run  Jankenモジュールの定義 この節では/src/Janken.pursを編集していく。
module Janken where import Prelude Handの定義 じゃんけんの手を表す型Handを定義する。
data Hand = Rock | Scissors | Paper 余談。これは公式ではタグ付き共用体と呼ばれているもの。Haskellでは代数的データ型と呼ばれているが、正直名前はどうでもいい。データをこのように表現すれば、「データはこの値しかとりえない」という制限が得られる。制限があれば、プログラムのバグも減らせる。たとえば、「グーを0、チョキを1、パーを2」として表現すると、万が一それ以外の値が来た場合に困る。上のようなHandの定義では、「それ以外の値」が入る余地すら与えない。…この話は、Elm Guideの受け売り。
Judgementの定義 同じようにして、じゃんけんの勝敗を表す型Judgementを定義する。
Judgement = WinLeft | WinRight | Draw なぜWinとかLoseではないのかというと、これはjudge関数の都合である。Judgeは、2つの手を引数にとり、その勝負結果を返す。WinやLoseだと、どっちが勝ちでどっちが負けか分からない。なので、「judgeの左側の引数が勝ったらWinLeft、右側が勝ったらWinRight、引き分けならDraw」と定義している。</description>
    </item>
    
  </channel>
</rss>
