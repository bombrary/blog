<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>neovim on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/categories/neovim/</link>
    <description>Recent content in neovim on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 25 Dec 2021 18:35:00 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/categories/neovim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neovimのプラグインを初めて作る - REPLの操作</title>
      <link>https://bombrary.github.io/blog/posts/nvim-plugin-repl/</link>
      <pubDate>Sat, 25 Dec 2021 18:35:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/nvim-plugin-repl/</guid>
      <description>動機 研究で使っているソフトウェアのREPLが少し使いづらい。というのも、制御文字がそのまま表示されてしまうため、十字キーのカーソル移動やCmd + Aの行先頭移動、Cmd + Kの行削除など効かないからだ。 rlwrap を使えばこの問題を解決できるのだが、別の解決案としてNeovimのREPL支援プラグインを作ってみようと思い立った。 Neovim のターミナル機能を使ってREPLを起動し、別バッファー上で入力した文字列をREPLに送るようなプラグインを作りたい。
GitHubで検索してみると同様の機能を実現するプラグインはいくつもあるようだが、プラグインを作る勉強として、自分で作ってみる。
提供する機能 使用感をvlimeと似たものにしたい。キーマップは次のようにする。
 &amp;lt;LocalLeader&amp;gt;ss カーソル下の行をREPLに送る。 &amp;lt;LocalLeader&amp;gt;s 選択範囲内行の文字列をREPLに送る。 &amp;lt;LocalLeader&amp;gt;i 1行入力用のバッファを表示し、そこで書いた文字列をREPLに送る。 &amp;lt;LocalLeader&amp;gt;cd Ctrl + DをREPLに送る。 &amp;lt;LocalLeader&amp;gt;cc Ctrl + CをREPLに送る。  その他、以下のコマンドを定義する。
 ReplOpen [cmd]: REPLを起動する。例えばReplOpen pythonならpythonのREPLが起動する。 [cmd]には任意のコマンドが入れられるため、REPL支援というよりターミナル支援プラグインという感じがするが、気にしないことにする。 ReplSend [string]: 文字列[string]をREPLに送る。  補足 vlimeとキーマップが被るため、vlimeを入れている人はどうするんだという事になる。 その場合、キーマップが被らないようにしたり、ftplugin下にスクリプトを書くなど色々と方法が考えられる。 ここでは一番無難そうな、「ReplOpenが呼び出された時にキーマップを登録する」という方法を採用する。
注意 普段使っているのがVimではなくNeovimなので、Neovimを使ってプラグインを書く。Vimには無い関数/機能を使うので注意。
あとVim scriptをほとんど書いたこと無いため、今回載せるコードには色々改善点があるだろう。
準備 適切なディレクトリにプラグインのディレクトリを作成。自分の環境では、packpathの1つに~/.config/nvimがあったので、 ~/.config/nvim/pack/plugins/start/に置く。プラグインのディレクトリは愚直にrepl.nvimとする
そこにautoload、plugin、ftpluginディレクトリを作成する。
repl.nvim | +-- autoload/ | | | +-- repl.vim | +-- plugin/ | +-- repl.vim REPLの起動 autoload/repl.vimに色々関数を定義する。
まずはREPLの起動から。ウインドウを分割し、ターミナルを起動し、コマンドcmdを実行する関数は素朴には以下のように書ける。</description>
    </item>
    
    <item>
      <title>neovimのプラグインがうまく動かなかったので原因を探した話</title>
      <link>https://bombrary.github.io/blog/posts/nvim-note0/</link>
      <pubDate>Fri, 01 Oct 2021 09:19:20 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/nvim-note0/</guid>
      <description>(2021/12/25追記) この記事で話題にした問題は最新のddc-nvim-lspで修正されている。こちらのissue及びこちらのcommitを参照。もっとも、この記事を書いてから大分経ったため、ddc_nvim_lsp.luaのソースコードも今では大分変わっている。
以下の文章のまとめ バージョン違いには注意する
ddc-nvim-lspは2021/10/1時点では、neovim 0.5.0を想定して作られているプラグインである。しかし自分はneovim 0.5.1を使ってしまっていた。neovim 0.5.1からlsp handlerの引数に破壊的変更があったため、LSPの補完が効かなかった。
究明に当たってDockerを触ったり、Luaを触ったり、ドキュメントを漁ったりして色々糧にはなったので、記録しておく。
何が起きたのか まず、プラグインの管理にはShougo/dein.vimを使った。
neovimのbuildin LSPを使ってLSPが使える環境を構築した。設定に当たって以下のプラグインを導入した。
 neovim/nvim-lspconfig  入力補完はShougo/ddc.vimを使った。それにあたって以下のプラグインを導入した。
 vim-denops/denops.vim: ddc.vimがDenoの機能を使うため必要。 Shougo/ddc-matcher_head Shougo/ddc-sorter_rank Shougo/ddc-around Shougo/ddc-nvim-lsp  最後のddc-nvim-lspがうまく動かなかった．
Language Serverとしてpyrightを導入したのだが、実際にPythonのファイルで入力補完を試したところ，ddc-aroundの補完は反応するが，ddc-nvim-lspの補完候補が現れなかった。
Dockerを使って再現性を検証する まず、
 何か他のプラグインが邪魔しているのではないか Macという環境だから問題なのだろうか  という仮説を立てた。そのためには、何も無い素のneovimの環境を作る必要があると考えた。そこで、環境をDockerで構築しようと考えた。
Docker環境の構築 適当なディレクトリを作って、そこにDockerfileとdocker-compose.ymlを作成する。
Dockerfileを以下のようにする。ベースイメージはanatolelucet/neovimにした。この時点でdeinを導入する。コマンドはdeinのQuick startを参照した。deinのインストールにあたってcurl、gitコマンドが必要なので、ここで導入する。
FROManatolelucet/neovim:stable-ubuntuRUN apt-get update &amp;amp;&amp;amp; apt-get install -y curl gitRUN curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh &amp;amp;&amp;amp; sh ./installer.sh ~/.cache/deinneovimの設定ファイルはコンテナ外で編集できるようにしておく。同ディレクトリにディレクトリ.config/nvim/を作成し、その上で、docker-compose.ymlを以下のようにする。
version:&amp;#39;3&amp;#39;services:nvim:build:.volumes:- .config:/root/.configentrypoint:&amp;#39;bash&amp;#39;working_dir:/root.config/nvim/の中にinit.vim、dein.toml&#39;、&#39;dein_lazy.tomlを作成。init.vimは以下の通り。
&amp;#34;dein Scripts-----------------------------if &amp;amp;compatible set nocompatible &amp;#34; Be iMprovedendif&amp;#34; Required:set runtimepath+=/root/.cache/dein/repos/github.com/Shougo/dein.vim&amp;#34; Required:call dein#begin(&amp;#39;/root/.</description>
    </item>
    
  </channel>
</rss>
