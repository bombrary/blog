<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brainfuck on Chanomic Blog</title>
    <link>https://bombrary.github.io/blog/categories/brainfuck/</link>
    <description>Recent content in Brainfuck on Chanomic Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 09 Jul 2021 23:15:00 +0900</lastBuildDate><atom:link href="https://bombrary.github.io/blog/categories/brainfuck/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PureScriptで作るBrainfuckインタプリタ 4/4 Halogenの利用</title>
      <link>https://bombrary.github.io/blog/posts/purescript-brainfuck04/</link>
      <pubDate>Fri, 09 Jul 2021 23:15:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-brainfuck04/</guid>
      <description>Halogenの利用 続いて、GUIでBrainfuckを動かすことをやってみる。 GUIのフレームワークとして、ここではpurescript-halogenを使ってみる。 Halogenについてはまだ勉強中で、この記事は解説記事というより勉強記録である(いままでの記事もそうではあるのだが)。
% spago install halogen  雛形 src/Main.pursを以下のようにする。 ここのコードはほとんどHalogen Guideと同様。 関数名的におそらく、body要素を取得して、その中でcomponentを走らせるのだと思う。
module Main where import Prelude import Effect (Effect) import Halogen.Aff (awaitBody, runHalogenAff) as HA import Halogen.VDom.Driver (runUI) import Component (component) main :: Effect Unit main = HA.runHalogenAff do body &amp;lt;- HA.awaitBody runUI component unit body componentはsrc/Component.pursで定義する。とりあえず雛形を作成。
module Component where import Prelude import Halogen as H import Halogen.HTML as HH data Action = Dummy type State = {} initialState :: forall input.</description>
    </item>
    
    <item>
      <title>PureScriptで作るBrainfuckインタプリタ 3/4 CUIでの可視化</title>
      <link>https://bombrary.github.io/blog/posts/purescript-brainfuck03/</link>
      <pubDate>Tue, 06 Jul 2021 10:35:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-brainfuck03/</guid>
      <description>動作の可視化 インタプリタ動作中における内部状態を可視化できると面白い。 そこで、インタプリタ動作中のログを出力できるような仕組みを作る。 ログは以下のタイミングで起こるようにする。
 onStart: インタプリタが動作したときに起こる。 onState state: 各ステップで状態を取得したときに起こる。 onCmd cmd: 各ステップで命令を取得できたときに起こる。 onEnd: インタプリタが終了するときに起こる。  これらはイベントリスナのように、関数の形で指定する。
Logの作成 src/Brainfuck/Interp/Log.pursを作成。
以下のimport文を書く。
module Brainfuck.Interp.Log where import Prelude import Brainfuck.Interp (Interp) import Brainfuck.State (State) import Brainfuck.Command (Command) import Effect.Class (class MonadEffect, liftEffect) import Effect.Console (log) Logを定義。
newtype Log m = Log { onStart :: Interp m Unit , onState :: State -&amp;gt; Interp m Unit , onCmd :: Command -&amp;gt; Interp m Unit , onEnd :: Interp m Unit } 関連する関数を定義。</description>
    </item>
    
    <item>
      <title>PureScriptで作るBrainfuckインタプリタ 2/4 CUIでの入出力</title>
      <link>https://bombrary.github.io/blog/posts/purescript-brainfuck02/</link>
      <pubDate>Mon, 05 Jul 2021 17:05:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-brainfuck02/</guid>
      <description>入出力用のストリーム作成 例えば出力だけ考えてみると、まず考えられるのは単純に、 logで出力することである。しかしlog以外の選択肢も考えられる。 logでコンソール出力するだけでなく、Webページのテキスト上で出力したり、テキストファイルに吐き出したりできるような汎用性が持たせられると良い。
そこで今回は、いわゆる「ストリームオブジェクト」のようなものを作って、そこから入出力を行うような設計にしてみる。
Streamの作成 src/Brainfuck/Interp/Stream.pursを作成。この後使うモジュールをインポート。
module Brainfuck.Interp.Stream where import Prelude import Brainfuck.Interp (Interp) Stream型を作成する。これは入出力を束ねた型になっている。 inputは、外部からの入力を1文字受け取る。 outputは、Charの値を外部に出力する。
newtype Stream = Stream { input :: Interp Char , output ::Char -&amp;gt; Interp Unit } Streamを通じてデータを読み書きする関数を作成。
read :: Stream -&amp;gt; Interp Char read (Stream { input }) = input write :: Char -&amp;gt; Stream -&amp;gt; Interp Unit write c (Stream { output }) = output c defaultStream :: Stream defaultStream = Stream { input, output } where input = pure &amp;#39;N&amp;#39; -- Not Implemented output _ = pure unit -- Not Implemented &amp;lsquo;.</description>
    </item>
    
    <item>
      <title>PureScriptで作るBrainfuckインタプリタ 1/4 基礎部分の作成</title>
      <link>https://bombrary.github.io/blog/posts/purescript-brainfuck01/</link>
      <pubDate>Sun, 04 Jul 2021 11:40:00 +0900</pubDate>
      
      <guid>https://bombrary.github.io/blog/posts/purescript-brainfuck01/</guid>
      <description>Brainfuckの記事ではあるが、実はモナド変換子を使ってみたかっただけだったりする。
以下の3部の記事で構成されている。
 インタプリタと基本的な命令の実装 (この記事) CUIでの入出力処理の実装 CUIでのインタプリタ可視化 Halogenを用いた入出力処理の実装  この記事でインタプリタの基本的な部分を実装し、 残りの3記事はインタプリタとはあまり関係ない話となる (とはいえ出力ができないと Hello, World すら書けないので、必要な記事ではある)。
Brainfuckインタプリタの構造 Brainfuckインタプリタは以下の情報を内部に持っているものとする。
 program: 命令の列。 iptr: インストラクションポインタ。実行する命令の位置を示す。プログラムカウンタみたいなもの。 dptr: データポインタ。メモリ上のある位置を示す。 memory: メモリ。  インタプリタは以下の手順を踏む。
 iptr番目の命令をprogramから読み取る。 読み取れなかったらプログラムを終了する。 命令に応じてmemory、dptrの書き換えだったり、入出力を行う。 iptrを1進め、手順1に戻る。  どんな命令があるのかについてはWikipedia参照。
準備 適当なディレクトリを作って、プロジェクトの初期化を行う。
% spago init  命令列の作成 src/Brainfuck/Command.pursを作成する。
Commandを定義。Showクラスのインスタンスにして、Charからの変換をする関数を作る。
module Brainfuck.Command where import Prelude data Command = IncPtr -- &amp;#34;+&amp;#34; | DecPtr -- &amp;#34;-&amp;#34; | IncDat -- &amp;#34;&amp;gt;&amp;#34; | DecDat -- &amp;#34;&amp;lt;&amp;#34; | LBrace -- &amp;#34;[&amp;#34; | RBrace -- &amp;#34;]&amp;#34; | Output -- &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
